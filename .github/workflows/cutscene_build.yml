name: Build cutscene only

#on: [push, pull_request]
on:   
  workflow_dispatch:
    inputs:
      debugMode:
        description: 'Build a debug binary?'
        type: boolean
        required: false
        default: false

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
          #- StandaloneLinux64
          #- StandaloneOSX
    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v2
        
      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-
            Library-

      # Test
      #- name: Run tests
      #  uses: game-ci/unity-test-runner@v2
      #  env:
      #    UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #  with:
      #    githubToken: ${{ secrets.GITHUB_TOKEN }}

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          #UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          DEBUG: ${{ github.event.inputs.debugMode }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          allowDirtyBuild: true
          buildName: MagicConnect
          versioning: Semantic
          customParameters: "${{ github.event.inputs.debugMode && '-Development -AllowDebugging' }}"
          unityVersion: 2020.3.17f1
          buildMethod: UnityBuilderAction.CutsceneStandaloneBuildScript.BuildCutsceneRemote

      # Output
      - uses: actions/upload-artifact@v2
        with:
          name: MagicConnect-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
